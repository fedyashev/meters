    /**
     * Add a new sheet to the workbook.
     * @param {Sheet} from - The sheet to be cloned.
     * @param {string} name - The name of the new sheet. Must be unique, less than 31 characters, and may not contain the following characters: \ / * [ ] : ?
     * @param {number|string|Sheet} [indexOrBeforeSheet] The index to move the sheet to or the sheet (or name of sheet) to move this sheet before. Omit this argument to move to the end of the workbook.
     * @returns {Sheet} The new sheet.
     */
    cloneSheet(from, name, indexOrBeforeSheet) {
        // Validate the sheet name.
        if (!name || typeof name !== "string") throw new Error("Invalid sheet name.");
        if (!from || !(from instanceof Sheet)) throw new Error("Invalid clone from.");
        if (_.some(badSheetNameChars, char => name.indexOf(char) >= 0)) throw new Error(`Sheet name may not contain any of the following characters: ${badSheetNameChars.join(" ")}`);
        if (name.length > maxSheetNameLength) throw new Error(`Sheet name may not be greater than ${maxSheetNameLength} characters.`);
        if (this.sheet(name)) throw new Error(`Sheet with name "${name}" already exists.`);

        // Get the destination index of new sheet.
        let index;
        if (_.isNil(indexOrBeforeSheet)) {
            index = this._sheets.length;
        } else if (_.isInteger(indexOrBeforeSheet)) {
            index = indexOrBeforeSheet;
        } else {
            if (!(indexOrBeforeSheet instanceof Sheet)) {
                indexOrBeforeSheet = this.sheet(indexOrBeforeSheet);
                if (!indexOrBeforeSheet) throw new Error("Invalid before sheet reference.");
            }

            index = this._sheets.indexOf(indexOrBeforeSheet);
        }

        // Add a new relationship for the new sheet and create the new sheet ID node.
        const relationship = this._relationships.add("worksheet"); // Leave target blank as it will be filled later.
        const sheetIdNode = {
            name: "sheet",
            attributes: {
                name,
                sheetId: ++this._maxSheetId,
                'r:id': relationship.attributes.Id
            },
            children: []
        };

        const cloneXml = node => {
            // If the node has a toXml method, call it.
            if (node && _.isFunction(node.toXml)) node = node.toXml();

            if (typeof node === 'object') {
                if (node.name) {
                    const result = {
                        name: node.name,
                        attributes: {},
                        children: []
                    };

                    _.forOwn(node.attributes, (value, name) => {
                        result.attributes[name] = value;
                    });

                    let chld;
                    if (node.children) {
                        node.children.forEach(child => {
                            chld = cloneXml(child);
                            if (child !== null) {
                                result.children.push(chld);
                            }
                        });
                    }
                    return result;
                }
            } else if (node !== null) {
                return node;
            }
            return null;
        };

        // clone SheetNode & relationshipNode from source
        const fromXml = from.toXmls();
        const relationshipNode = cloneXml(fromXml.relationships);
        const sheetNode = cloneXml(fromXml.sheet);

        const sheet = new Sheet(this, sheetIdNode, sheetNode, relationshipNode);

        // Insert the sheet at the appropriate index.
        this._sheets.splice(index, 0, sheet);

        return sheet;
    }