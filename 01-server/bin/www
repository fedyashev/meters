#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require('../app');
const debug = require('debug')('01-server:server');
const http = require('http');
const https = require('https');
const fs = require('fs');

const privateKey  = fs.readFileSync('sslcert/domain-key.txt', 'utf8');
const certificate = fs.readFileSync('sslcert/domain-crt.txt', 'utf8');
const credentials = {key: privateKey, cert: certificate};

/**
 * Get port from environment and store in Express.
 */

const defaultPortHttp = 5000;
const defaultPortHttps = 5443;

var portHttp = normalizePort(process.env.PORT || defaultPortHttp);
var portHttps = normalizePort(process.env.PORT_HTTPS || defaultPortHttps);

/**
 * Create HTTP server.
 */

const server = http.createServer(app);
const httpsServer = https.createServer(credentials, app);
 
/**
 * Listen on provided port, on all network interfaces.
 */

const onError = port => error => {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string' ?
    'Pipe ' + port :
    'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

server.listen(portHttp);
server.on('request', require('redirect-https')({
  port: portHttps,
  trustProxy: true
}));
server.on('error', onError(portHttp));
server.on('listening', onListening);

httpsServer.listen(portHttps);
httpsServer.on('error', onError(portHttps));
httpsServer.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  let port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  let addr = this.address();
  let bind = typeof addr === 'string' ?
    'pipe ' + addr :
    'port ' + addr.port;
  debug('Listening on ' + bind);
  console.log(`Server start on ${addr.address}:${addr.port}`);
}